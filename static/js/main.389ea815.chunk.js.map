{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","city","undefined","status","cod","country","desc","humidity","temp","e","this","setState","fetch","then","data","json","main","sys","name","weather","description","console","log","catch","error","event","target","value","type","onChange","handlechange","onClick","get_temp","reset","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2OAsGeA,G,kNA7FbC,MAAM,CACJC,UAAKC,EACLC,YAAOD,EACPE,SAAIF,EACJG,aAAQH,EACRI,UAAKJ,EACLK,cAASL,EACTM,UAAKN,G,oDAIDO,GACJC,KAAKC,SAAS,CACdV,UAAKC,EACLF,WAAME,EACNE,SAAIF,EACJG,aAAQH,EACRI,UAAKJ,EACLK,cAASL,EACTM,UAAKN,M,+BAKEO,GAAG,IAAD,OACTC,KAAKC,SAAS,CAEZR,YAAOD,EACPF,WAAME,EACNE,SAAIF,EACJG,aAAQH,EACRI,UAAKJ,EACLK,cAASL,EACTM,UAAKN,IAOPU,MAHS,qDAGEF,KAAKV,MAAMC,KAFX,2CAGVY,MAAK,SAAAC,GAAI,OAAEA,EAAKC,UAChBF,MACC,SAAAC,GAAO,IACCE,EAAgCF,EAAhCE,KAAMC,EAA0BH,EAA1BG,IAAKC,EAAqBJ,EAArBI,KAAMC,EAAeL,EAAfK,QAAQf,EAAOU,EAAPV,IAC/B,EAAKO,SAAS,CAACV,KAAKiB,EACLd,IAAIA,EACLI,KAAMQ,EAAKR,KACXD,SAAUS,EAAKT,SACfD,KAAKa,EAAQ,GAAGC,YAChBf,QAAQY,EAAIZ,QACZF,OAAO,eAErBkB,QAAQC,IAAIR,MACbS,OACD,SAAAC,GACE,EAAKb,SAAS,CAACR,OAAO,iBACtBkB,QAAQC,IAAIE,Q,mCAILC,GACXf,KAAKC,SAAL,eAAiBc,EAAMC,OAAOR,KAAQO,EAAMC,OAAOC,U,+BAI3C,IAAD,OAEP,OACM,6BAEA,+CACA,sEACA,2BAAOC,KAAK,OAAOV,KAAK,OAAOW,SAAU,SAAAJ,GAAK,OAAE,EAAKK,aAAaL,MAClE,4BAAQP,KAAK,OAAOa,QAAS,SAAAtB,GAAC,OAAE,EAAKuB,SAASvB,KAA9C,iBAKM,sCAAYC,KAAKV,MAAMG,QACvB,oCAAUO,KAAKV,MAAMC,MACrB,2CAAiBS,KAAKV,MAAMQ,MAC5B,uCAAaE,KAAKV,MAAMK,SACxB,wCAAcK,KAAKV,MAAMO,UACzB,2CAAiBG,KAAKV,MAAMM,MAC5B,4BACA,4BAAQyB,QAAS,SAAAtB,GAAI,EAAKwB,MAAMxB,KAAhC,c,GAxFEyB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEd1B,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM0B,a","file":"static/js/main.389ea815.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\n\nconst apiKey = \"44883ed03698c9db1fd522d778ff25a1\";\n\n\nclass App extends Component {\n\n  state={\n    city:undefined,\n    status:undefined,\n    cod:undefined,\n    country:undefined,\n    desc:undefined,\n    humidity:undefined,\n    temp:undefined\n    \n  }\n  \n  reset(e){\n    this.setState({\n    city:undefined,\n    state:undefined,\n    cod:undefined,\n    country:undefined,\n    desc:undefined,\n    humidity:undefined,\n    temp:undefined\n    })\n  }\n\n\n  get_temp(e){\n    this.setState({\n      // city:undefined,\n      status:undefined,\n      state:undefined,\n      cod:undefined,\n      country:undefined,\n      desc:undefined,\n      humidity:undefined,\n      temp:undefined\n    })\n\n\n    let url1=\"https://api.openweathermap.org/data/2.5/weather?q=\"\n    let api_id=\"&appid=44883ed03698c9db1fd522d778ff25a1\"\n\n    fetch(url1+this.state.city+api_id)\n    .then(data=>data.json())\n    .then(\n      data=>{\n      const { main, sys, name, weather,cod } =data;\n        this.setState({city:name,\n                       cod:cod,\n                      temp: main.temp,\n                      humidity: main.humidity,\n                      desc:weather[0].description,\n                      country:sys.country,\n                      status:\"City Found\"})\n        \n        console.log(data)\n    }).catch(\n      error=>{\n        this.setState({status:\"invalid CITY\"})\n        console.log(error)\n      }\n    );\n  }\n  handlechange(event){\n    this.setState({ [event.target.name] : event.target.value})\n  }\n\n\n  render() {\n    \n    return (\n          <div>\n\n          <h1>Weather Finder:</h1>\n          <h2>Please Enter your city to know weather</h2>\n          <input type=\"text\" name=\"city\" onChange={event=>this.handlechange(event)} />\n          <button name=\"city\" onClick={e=>this.get_temp(e)}> get_weather </button>\n\n          \n\n\n                <p>status: {this.state.status}</p>\n                <p>City: {this.state.city}</p>\n                <p>temperature: {this.state.temp}</p>\n                <p>Country: {this.state.country}</p>\n                <p>Humidity: {this.state.humidity}</p>\n                <p>Description: {this.state.desc}</p>\n                <p></p>\n                <button onClick={e=>{this.reset(e)}} >RESET</button>\n             \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}